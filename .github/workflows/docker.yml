name: Build & Push Docker Container

on:
  push:
    branches:
      - 'main'
      - 'master'
      - 'develop'
  workflow_dispatch:

env:
  ORG_NAME: nsouto
  APP_SLUG_NAME: invoiceshelf

jobs:
  # ---------------------------
  # 1. Pre-Build Steps
  # ---------------------------
  environment:
    name: Detect Environment
    uses: ./.github/workflows/environment.yml

  geoip:
    name: Download GeoIP
    uses: ./.github/workflows/geoip.yml

  dotenv:
    name: Get DotEnv
    needs: [ environment ]
    uses: ./.github/workflows/dotenv.yml
    secrets:
      DOTENV_TOKEN: ${{ secrets.DOTENV_TOKEN }}
    with:
      ENV_NAME: ${{ needs.environment.outputs.env_name }}
      SLUG_APP_NAME: invoiceshelf

  version:
    name: Extract Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      - name: Check out InvoiceShelf repo to extract version
        uses: actions/checkout@v4
        with:
          repository: InvoiceShelf/InvoiceShelf
          path: invoice_repo
      - name: Extract Version from remote repo
        id: extract_version
        working-directory: invoice_repo
        run: |
          # Using git tags to get the latest tag (adjust as needed)
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "unknown")
          echo "Version found: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  # ---------------------------
  # 2. Build the Images (Matrix)
  # ---------------------------
  build:
    name: Build Docker Image (Matrix)
    runs-on: ubuntu-latest
    needs: [ environment, geoip, dotenv, version ]
    strategy:
      fail-fast: false
      matrix:
        arch:
          - name: amd64
            platform: linux/amd64
          - name: arm64
            platform: linux/arm64
    steps:
      - name: Report environment and arch
        run: |
          echo "Building for env: ${{ needs.environment.outputs.env_name }}, arch: ${{ matrix.arch.name }}"

      # Checkout your current repository (which contains your Dockerfile and other needed files)
      - name: Check out current repo
        uses: actions/checkout@v4
        with:
          lfs: false
          path: current_repo

      # Checkout the remote InvoiceShelf repo (to merge its files)
      - name: Check out InvoiceShelf repo
        uses: actions/checkout@v4
        with:
          repository: InvoiceShelf/InvoiceShelf
          path: invoiceshelf_repo

      # Merge the remote repo into the current repo
      - name: Merge InvoiceShelf repo with current repo
        run: |
          cp -r invoiceshelf_repo/* current_repo/
          cp -r invoiceshelf_repo/.[^.]* current_repo/ || true

      # Restore caches and copy to current_repo
      - name: Download GeoIP from Cache
        uses: actions/cache/restore@v4
        with:
          path: database/geoip/
          key: geoip

      - name: Download DotEnv from Cache
        uses: actions/cache/restore@v4
        with:
          path: .env
          key: dotenv_${{ needs.environment.outputs.env_name }}

      - name: Copy GeoIP data into current_repo
        run: |
          if [ -d "database/geoip" ]; then
            mkdir -p current_repo/database/geoip
            cp -r database/geoip/* current_repo/database/geoip/
          else
            echo "No GeoIP data found in the root directory."
          fi

      - name: Copy .env into current_repo
        run: |
          if [ -f ".env" ]; then
            cp .env current_repo/
          else
            echo ".env file not found in the root directory."
          fi

      - name: Debug - list root directory
        run: ls -al

      - name: Debug - list current_repo directory
        run: ls -al current_repo

      - name: Import environment variables from file
        uses: cardinalby/export-env-action@v2
        with:
          envFile: "current_repo/.env"
          expand: "true"

      # Docker Build steps
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push image for ${{ matrix.arch.name }}
        uses: docker/build-push-action@v6
        with:
          context: current_repo
          platforms: ${{ matrix.arch.platform }}
          push: true
          # Push two tags per build:
          #   1. One for the "latest" (based on your environment)
          #   2. One with the version from the remote repo
          tags: |
            docker.io/${{ env.ORG_NAME }}/${{ env.APP_SLUG_NAME }}:${{ needs.environment.outputs.env_name }}-latest-${{ matrix.arch.name }}
            docker.io/${{ env.ORG_NAME }}/${{ env.APP_SLUG_NAME }}:${{ needs.version.outputs.version }}-${{ matrix.arch.name }}
          build-args: |
            "APP_NAME=${{ env.APP_NAME }}"
            "APP_SLUG_NAME=${{ env.APP_SLUG_NAME }}"
            "APP_ENV=${{ env.APP_ENV }}"

  # ---------------------------
  # 3. Create and Push Manifests
  # ---------------------------
  manifest:
    name: Create and Push Multi-Arch Manifests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Create manifest for the "latest" tag (using your environment output)
      - name: Create and push manifest for latest tag
        run: |
          docker manifest create docker.io/${{ env.ORG_NAME }}/${{ env.APP_SLUG_NAME }}:${{ needs.environment.outputs.env_name }}-latest \
            docker.io/${{ env.ORG_NAME }}/${{ env.APP_SLUG_NAME }}:${{ needs.environment.outputs.env_name }}-latest-amd64 \
            docker.io/${{ env.ORG_NAME }}/${{ env.APP_SLUG_NAME }}:${{ needs.environment.outputs.env_name }}-latest-arm64
          docker manifest push docker.io/${{ env.ORG_NAME }}/${{ env.APP_SLUG_NAME }}:${{ needs.environment.outputs.env_name }}-latest

      # Create manifest for the version tag
      - name: Create and push manifest for version tag
        run: |
          docker manifest create docker.io/${{ env.ORG_NAME }}/${{ env.APP_SLUG_NAME }}:${{ needs.version.outputs.version }} \
            docker.io/${{ env.ORG_NAME }}/${{ env.APP_SLUG_NAME }}:${{ needs.version.outputs.version }}-amd64 \
            docker.io/${{ env.ORG_NAME }}/${{ env.APP_SLUG_NAME }}:${{ needs.version.outputs.version }}-arm64
          docker manifest push docker.io/${{ env.ORG_NAME }}/${{ env.APP_SLUG_NAME }}:${{ needs.version.outputs.version }}

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ vars.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ vars.SENTRY_PROJECT }}
        with:
          environment: ${{ needs.environment.outputs.env_name }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: Logs
          path: current_repo/storage/logs